// ==UserScript==
// @name         OpenTableBot
// @match        https://www.opentable.com/*
// @match        https://cdn.otstatic.com/maintenance/busy/index.html
// @version      0.1
// @description  get your reservation when others cancel
// @author       Nohren
// @grant        window.close
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==
(function() {
    "use strict";
    const minCheckTime = 2e4;
    const maxCheckTime = 6e4 * 1.2;
    async function i(e, o) {
        const t = {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                message: e,
                href: o
            })
        };
        try {
            const n = await fetch("http://localhost:8080/reservation", t);
            !n.ok ? console.log("Email send failed") : console.log("Email send success!");
            const i = await n.json();
            console.log(i);
        } catch (e) {
            console.log("Failed to send data to server", e);
        }
    }
    function l() {
        const e = o();
        console.log(`checking again in ${(e / 1e3 / 60).toFixed(2)} minutes`);
        setTimeout(() => window.location.reload(), e);
    }
    function o() {
        return Math.floor(Math.max(minCheckTime, Math.random() * maxCheckTime));
    }
    async function e() {
        console.log("checking for time slots");
        let e;
        await new Promise(e => setTimeout(e, 5e3));
        const o = document.querySelector("[data-test='time-slots']");
        for (const t of o.children) {
            if (t.firstChild.ariaLabel) {
                e = `Reservation found! - ${new Date()}`;
                const n = `Reservation available at ${t.firstChild.innerText}: ${t.firstChild.ariaLabel}`;
                i(n, t.firstChild.href);
                t.firstChild.click();
            }
        }
        console.log(e ?? `no reservation found - ${new Date()}`);
        if (!e) {
            l();
        }
    }
    async function t() {
        console.log("booking page");
        await new Promise(e => setTimeout(e, 500));
        const e = document.querySelector("[data-test='complete-reservation-button']");
        if (e) {
            e.click();
        }
    }
    const n = document.createElement("div");
    if (window.location.pathname === "/maintenance/busy/index.html") {
        const a = GM_getValue("url", null);
        console.log("got kicked out. Will try again in 20 min");
        console.log(a);
        setTimeout(() => {
            window.location.assign(a);
        }, 1e3 * 60 * 20);
    }
    if (window.location.pathname === "/booking/details") {
        n.innerText = "ðŸ¤– Agent Running";
        n.style.backgroundColor = "lime";
        //somtimes user script is injected after the page is loaded, and sometimes before.
        if (document.readyState === "complete") {
            t();
        } else {
            window.onload = t;
        }
    } else if (document.querySelector("[data-test='restaurant-profile-photo']")) {
        n.innerText = "ðŸ¤– Agent Running";
        n.style.backgroundColor = "lime";
        GM_setValue("url", window.location.href);
        if (document.readyState === "complete") {
            e();
        } else {
            window.onload = e;
        }
    } else {
        n.innerText = "ðŸ¤– Agent Armed";
        n.style.backgroundColor = "yellow";
    }
    n.style.position = "relative";
    n.style.textAlign = "center";
    n.style.fontWeight = "bold";
    n.style.fontSize = "xx-large";
    document.body.prepend(n);
})();